version: '3.8'

services:
  vrtx-mongodb:
    image: mongo:5.0
    container_name: vrtx-mongodb
    environment:
      MONGO_INITDB_DATABASE: scheduler-api
      MONGO_INITDB_ROOT_USERNAME: vrtx
      MONGO_INITDB_ROOT_PASSWORD: vrtx
    ports:
      - "27018:27017"
    volumes:
      - vrtx-mongo-data:/data/db
    restart: unless-stopped  # always restarts
    networks:
      - scheduler-network

  vrtx-redis:
    image: redis:7.0-alpine  # light version
    container_name: vrtx-redis
    command: ["redis-server", "--requirepass", "vrtx"]
    ports:
      - "6380:6379"  # use 6380 to avoid conflict with any running container
    volumes:
      - vrtx-redis-data:/data
    restart: unless-stopped
    networks:
      - scheduler-network
   
  vrtx-pg:
    image: postgres:15-alpine
    container_name: vrtx-pg
    environment:
      POSTGRES_USER: vrtx
      POSTGRES_PASSWORD: vrtx
      POSTGRES_DB: scheduler-engine
    ports:
      - "5435:5432"
    volumes:
      - vrtx-pg-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - scheduler-network
  
  scheduler-api:
    build:
      context: .
      dockerfile: Dockerfile.scheduler-api
    image: scheduler-api:latest
    container_name: scheduler-api
    environment:
      # MongoDB connection string
      MONGO_URI: mongodb://vrtx:vrtx@vrtx-mongodb:27017/scheduler-api?authSource=admin
      # Redis connection string
      REDIS_URL: redis://:vrtx@vrtx-redis:6379
      REDIS_HOST: vrtx-redis
      REDIS_PORT: 6379


      # in production, the .env should be inject after the container is created and assigned to the container from k8s secret or vault tools 
      REDIS_PASSWORD: vrtx
      # JWT configuration
      JWT_SECRET: super-secret-jwt-key-change-in-production
      # gRPC configuration
      ENGINE_GRPC_URL: scheduler-engine:50051
      # Swagger documentation
      SWAGGER_USER: admin
      SWAGGER_PASS: admin
      # Application port
      PORT: 3000
      # OpenTelemetry
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_SERVICE_NAME: scheduler-api
    ports:
      - "3001:3000"
    depends_on:
      - vrtx-mongodb
      - vrtx-redis
      - otel-collector
    restart: unless-stopped
    networks:
      - scheduler-network

  scheduler-engine:
    build:
      context: .
      dockerfile: Dockerfile.scheduler-engine
    image: scheduler-engine:latest
    container_name: scheduler-engine
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://vrtx-pg:5432/scheduler-api
    ports:
      - "8081:8081"
    depends_on:
      - vrtx-pg
      - otel-collector
    restart: unless-stopped
    networks:
      - scheduler-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # jaeger-collector
    networks:
      - scheduler-network

  otel-collector:
    image: otel/opentelemetry-collector:0.109.0
    container_name: otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./observability/otel-collector/config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8888:8888" # Collector metrics
    depends_on:
      - jaeger
    networks:
      - scheduler-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - scheduler-network

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - scheduler-network

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: ["-config.file=/etc/loki/loki-config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki-data:/loki
    networks:
      - scheduler-network

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./observability/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    networks:
      - scheduler-network

# for persistence 
volumes:
  vrtx-mongo-data:
  vrtx-redis-data:
  vrtx-pg-data:
  grafana-storage:
  loki-data:

networks:
  scheduler-network:
    driver: bridge
