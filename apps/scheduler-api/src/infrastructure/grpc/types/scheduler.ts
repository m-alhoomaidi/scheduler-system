// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.19.1
// source: scheduler.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "scheduler";

export interface RegisterTaskRequest {
  ssuuid: string;
  message: string;
}

export interface RegisterTaskResponse {
  taskId: string;
}

export interface DeleteTaskRequest {
  taskId: string;
}

export interface DeleteTaskResponse {
  deleted: boolean;
}

export interface PingRequest {
}

export interface PingResponse {
  status: string;
}

export interface ListTasksRequest {
  /** 0-based page index */
  page: number;
  /** items per page */
  pageSize: number;
  /** optional filter */
  ssuuid: string;
  /** optional filter, e.g., PENDING/RUNNING/COMPLETED/FAILED/DELETED */
  status: string;
}

export interface TaskItem {
  id: string;
  ssuuid: string;
  message: string;
  status: string;
  executionCount: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  lastExecutedAt: Timestamp | undefined;
}

export interface ListTasksResponse {
  tasks: TaskItem[];
  /** total items across all pages */
  total: string;
  /** current page index */
  page: number;
  /** current page size */
  pageSize: number;
  /** whether another page exists */
  hasNext: boolean;
}

export const SCHEDULER_PACKAGE_NAME = "scheduler";

export interface TaskEngineClient {
  registerTask(request: RegisterTaskRequest): Observable<RegisterTaskResponse>;

  deleteTask(request: DeleteTaskRequest): Observable<DeleteTaskResponse>;

  ping(request: PingRequest): Observable<PingResponse>;

  listTasks(request: ListTasksRequest): Observable<ListTasksResponse>;
}

export interface TaskEngineController {
  registerTask(
    request: RegisterTaskRequest,
  ): Promise<RegisterTaskResponse> | Observable<RegisterTaskResponse> | RegisterTaskResponse;

  deleteTask(
    request: DeleteTaskRequest,
  ): Promise<DeleteTaskResponse> | Observable<DeleteTaskResponse> | DeleteTaskResponse;

  ping(request: PingRequest): Promise<PingResponse> | Observable<PingResponse> | PingResponse;

  listTasks(request: ListTasksRequest): Promise<ListTasksResponse> | Observable<ListTasksResponse> | ListTasksResponse;
}

export function TaskEngineControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerTask", "deleteTask", "ping", "listTasks"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TaskEngine", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TaskEngine", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TASK_ENGINE_SERVICE_NAME = "TaskEngine";
