plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'com.scheduler'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

ext {
  grpcJavaVersion = '1.65.0'
  protobufVersion = '3.25.3'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('timefoldSolverVersion', "1.24.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	
	// Jakarta validation
	implementation 'jakarta.validation:jakarta.validation-api'
	implementation 'ai.timefold.solver:timefold-solver-spring-boot-starter'

	// Observability
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	
	// gRPC
	implementation "net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE"
    implementation "io.grpc:grpc-protobuf:${grpcJavaVersion}"
    implementation "io.grpc:grpc-stub:${grpcJavaVersion}"
    runtimeOnly   "io.grpc:grpc-netty-shaded:${grpcJavaVersion}"
    implementation "io.grpc:grpc-services:${grpcJavaVersion}" // reflection/health services
    
    // Protobuf dependencies
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"


	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Dev
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// DB
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	// Flyway for DB migrations
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'



}

dependencyManagement {
	imports {
		mavenBom "ai.timefold.solver:timefold-solver-bom:${timefoldSolverVersion}"
	}
}

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:${protobufVersion}" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcJavaVersion}" }
  }
  generateProtoTasks {
    all().each { t -> t.plugins { grpc { option '@generated=omit' } } }
  }
}

tasks.named('test') {
	useJUnitPlatform()
}


// To use proto file from libs/proto (shared libs)
sourceSets {
  main {
    proto {
      srcDir '../../libs/proto'
    }
  }
}